- hosts: all
  gather_facts: no

  vars: 
    ipv4_list: []
    scan_report: []

  tasks:

  - name: "Obtain all public IPv4 on FortiGate"
    delegate_to: localhost
    fortiosconfig:
      action: "get"
      ssl_verify: False
      host:  "{{ ansible_host }}"
      username: "{{  ansible_user }}"
      password: "{{ ansible_password }}"
      vdom: "global"
      config: "system interface"
      config_parameters:
    register: output

  - set_fact:
      ipv4_list: "{{ ipv4_list + [ item.ip.split(' ')[0] ] }}"
    with_items:
    - "{{ output.meta.results }}"
    loop_control:
      label: "{{ item.ip.split(' ')[0] }}"
  - set_fact:
      ipv4_list: "{{ ipv4_list | ipaddr('public') | unique }}"

  #
  #
  # Scan workflow

  - name: "Scanning ports from the solidex host"
    delegate_to: solidex
    shell: nmap {{ item }} -p22,23,80,443,541 --open | grep open
    register: solidex_scan
    with_items: 
    - "{{ ipv4_list }}"
    ignore_errors: yes

  - name: "Scanning ports from the customer host"
    delegate_to: customer
    shell: nmap {{ item }} -p22,23,80,443,541 --open | grep open
    register: customer_scan
    with_items:
    - "{{ ipv4_list }}"
    ignore_errors: yes

  #
  #
  # Create report about scan workflow

  - set_fact:
      scan_report: "{{ scan_report + [ 'FROM solidex' + ' TO ' + item.item + ':\n' + item.stdout ]}}"
    when: item.stdout != "" 
    with_items: 
    - "{{ solidex_scan.results }}"
  - set_fact:
      scan_report: "{{ scan_report + [ 'FROM customer' + ' TO ' + item.item + ':\n' + item.stdout ]}}"
    when: item.stdout != "" 
    with_items: 
    - "{{ customer_scan.results }}"  

  - set_fact: 
      scan_report: "Access restricted ok"
    when: scan_report == []
  
  - debug:
      msg: "{{ scan_report }}"
  